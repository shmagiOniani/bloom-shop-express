import React, { createContext, useContext, useState, useCallback } from 'react';

interface LanguageContextProps {
  language: string;
  setLanguage: (lang: string) => void;
  t: (key: string, params?: Record<string, string | number>) => string;
}

const LanguageContext = createContext<LanguageContextProps | undefined>(undefined);

export const LanguageProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState(localStorage.getItem('language') || 'en');

  React.useEffect(() => {
    localStorage.setItem('language', language);
  }, [language]);

  const translations = {
    en: {
      "home.welcome": "Welcome!",
      "home.description": "Explore our wide range of products and find the perfect items for you.",
      "products.title": "Products",
      "products.description": "Check out our amazing products!",
      "product.addToCart": "Add to Cart",
      "product.viewDetails": "View Details",
      "cart.title": "Shopping Cart",
      "cart.empty": "Your cart is currently empty.",
      "cart.update": "Update",
      "cart.remove": "Remove",
      "cart.checkout": "Checkout",
      "cart.total": "Total:",
      "checkout.title": "Checkout",
      "checkout.name": "Name",
      "checkout.address": "Address",
      "checkout.city": "City",
      "checkout.state": "State",
      "checkout.zip": "ZIP Code",
      "checkout.phone": "Phone",
      "checkout.email": "Email",
      "checkout.placeOrder": "Place Order",
      "thankYou.title": "Thank You!",
      "thankYou.message": "Your order has been placed successfully.",
      "stores.title": "Our Stores",
      "stores.description": "Visit one of our stores to experience our products in person.",
      "store.hours": "Hours:",
      "store.specialty": "Specialty:",
      "storeManagement.title": "Store Management",
      "storeManagement.addStore": "Add Store",
      "storeManagement.editStore": "Edit Store",
      "storeManagement.deleteStore": "Delete Store",
      "storeManagement.name": "Store Name",
      "storeManagement.address": "Address",
      "storeManagement.city": "City",
      "storeManagement.state": "State",
      "storeManagement.zipCode": "ZIP Code",
      "storeManagement.phone": "Phone",
      "storeManagement.hours": "Hours",
      "storeManagement.specialty": "Specialty",
      "productManagement.title": "Product Management",
      "productManagement.addProduct": "Add Product",
      "productManagement.editProduct": "Edit Product",
      "productManagement.deleteProduct": "Delete Product",
      "productManagement.name": "Product Name",
      "productManagement.description": "Description",
      "productManagement.price": "Price",
      "productManagement.imageUrl": "Image URL",
      "productManagement.category": "Category",
      "productManagement.store": "Store",
      "profile.title": "Profile",
      "profile.username": "Username",
      "profile.fullName": "Full Name",
      "profile.avatarUrl": "Avatar URL",
      "settings.title": "Settings",
      "settings.language": "Language",
      "settings.theme": "Theme",
      "login.title": "Login",
      "login.email": "Email",
      "login.password": "Password",
      "login.signIn": "Sign In",
      "login.noAccount": "Don't have an account?",
      "login.signUp": "Sign up",
      "register.title": "Register",
      "register.firstName": "First Name",
      "register.lastName": "Last Name",
      "register.email": "Email",
      "register.password": "Password",
      "register.confirmPassword": "Confirm Password",
      "register.createAccount": "Create Account",
      "register.alreadyAccount": "Already have an account?",
      "register.signIn": "Sign in",
      "unauthorized.title": "Unauthorized",
      "unauthorized.message": "You are not authorized to view this page.",
      "notFound.title": "Page Not Found",
      "notFound.message": "The page you are looking for does not exist.",
      "user.login": "Login",
      "user.logout": "Logout",
      "user.profile": "Profile",
      "user.settings": "Settings",
      "user.account": "Account",
      "user.storeManagement": "Store Management",
      "user.productManagement": "Product Management",
      "user.adminPanel": "Admin Panel",
      "adminPanel.title": "Admin Panel",
      "adminPanel.users": "Users",
      "adminPanel.stores": "Stores",
      "adminPanel.products": "Products",
      "language.english": "English",
      "language.spanish": "Spanish",
      "cart.items": "{count} items",
      "theme.light": "Light",
      "theme.dark": "Dark",
      "theme.system": "System",
      "theme.title": "Theme",
      "storeDetail.products": "Products in this store",
      "storeDetail.contactUs": "Contact us",
      "storeDetail.address": "Address",
      "storeDetail.phone": "Phone",
      "storeDetail.hours": "Opening Hours",
      "storeDetail.specialty": "Specialty",
      "storeDetail.noProducts": "No products in this store",
    },
    es: {
      "home.welcome": "¡Bienvenido!",
      "home.description": "Explora nuestra amplia gama de productos y encuentra los artículos perfectos para ti.",
      "products.title": "Productos",
      "products.description": "¡Echa un vistazo a nuestros increíbles productos!",
      "product.addToCart": "Añadir al carrito",
      "product.viewDetails": "Ver detalles",
      "cart.title": "Carrito de compras",
      "cart.empty": "Su carrito está actualmente vacío.",
      "cart.update": "Actualizar",
      "cart.remove": "Eliminar",
      "cart.checkout": "Comprar",
      "cart.total": "Total:",
      "checkout.title": "Comprar",
      "checkout.name": "Nombre",
      "checkout.address": "Dirección",
      "checkout.city": "Ciudad",
      "checkout.state": "Estado",
      "checkout.zip": "Código postal",
      "checkout.phone": "Teléfono",
      "checkout.email": "Correo electrónico",
      "checkout.placeOrder": "Realizar pedido",
      "thankYou.title": "¡Gracias!",
      "thankYou.message": "Su pedido se ha realizado con éxito.",
      "stores.title": "Nuestras tiendas",
      "stores.description": "Visite una de nuestras tiendas para experimentar nuestros productos en persona.",
      "store.hours": "Horas:",
      "store.specialty": "Especialidad:",
      "storeManagement.title": "Gestión de tiendas",
      "storeManagement.addStore": "Agregar tienda",
      "storeManagement.editStore": "Editar tienda",
      "storeManagement.deleteStore": "Eliminar tienda",
      "storeManagement.name": "Nombre de la tienda",
      "storeManagement.address": "Dirección",
      "storeManagement.city": "Ciudad",
      "storeManagement.state": "Estado",
      "storeManagement.zipCode": "Código postal",
      "storeManagement.phone": "Teléfono",
      "storeManagement.hours": "Horas",
      "storeManagement.specialty": "Especialidad",
      "productManagement.title": "Gestión de productos",
      "productManagement.addProduct": "Añadir producto",
      "productManagement.editProduct": "Editar producto",
      "productManagement.deleteProduct": "Eliminar producto",
      "productManagement.name": "Nombre del producto",
      "productManagement.description": "Descripción",
      "productManagement.price": "Precio",
      "productManagement.imageUrl": "URL de la imagen",
      "productManagement.category": "Categoría",
      "productManagement.store": "Tienda",
      "profile.title": "Perfil",
      "profile.username": "Nombre de usuario",
      "profile.fullName": "Nombre completo",
      "profile.avatarUrl": "URL del avatar",
      "settings.title": "Ajustes",
      "settings.language": "Idioma",
      "settings.theme": "Tema",
      "login.title": "Acceso",
      "login.email": "Correo electrónico",
      "login.password": "Contraseña",
      "login.signIn": "Acceder",
      "login.noAccount": "¿No tienes una cuenta?",
      "login.signUp": "Regístrate",
      "register.title": "Registro",
      "register.firstName": "Nombre",
      "register.lastName": "Apellido",
      "register.email": "Correo electrónico",
      "register.password": "Contraseña",
      "register.confirmPassword": "Confirmar contraseña",
      "register.createAccount": "Crear cuenta",
      "register.alreadyAccount": "¿Ya tienes una cuenta?",
      "register.signIn": "Acceder",
      "unauthorized.title": "No autorizado",
      "unauthorized.message": "No está autorizado para ver esta página.",
      "notFound.title": "Página no encontrada",
      "notFound.message": "La página que está buscando no existe.",
       "user.login": "Acceder",
      "user.logout": "Cerrar sesión",
      "user.profile": "Perfil",
      "user.settings": "Ajustes",
      "user.account": "Cuenta",
      "user.storeManagement": "Gestión de tiendas",
      "user.productManagement": "Gestión de productos",
      "user.adminPanel": "Panel de administrador",
      "adminPanel.title": "Panel de administrador",
      "adminPanel.users": "Usuarios",
      "adminPanel.stores": "Tiendas",
      "adminPanel.products": "Productos",
      "language.english": "Inglés",
      "language.spanish": "Español",
      "cart.items": "{count} artículos",
      "theme.light": "Claro",
      "theme.dark": "Oscuro",
      "theme.system": "Sistema",
      "theme.title": "Tema",
      "storeDetail.products": "Productos en esta tienda",
      "storeDetail.contactUs": "Contáctanos",
      "storeDetail.address": "Dirección",
      "storeDetail.phone": "Teléfono",
      "storeDetail.hours": "Horario",
      "storeDetail.specialty": "Especialidad",
      "storeDetail.noProducts": "No hay productos en esta tienda",
    },
  };

  const t = useCallback((key: string, params: Record<string, string | number> = {}) => {
    let translation = translations[language as keyof typeof translations][key] || key;
    
    Object.entries(params).forEach(([paramKey, paramValue]) => {
      translation = translation.replace(`{${paramKey}}`, String(paramValue));
    });

    return translation;
  }, [language]);

  const value = { language, setLanguage, t };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
